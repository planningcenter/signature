// Package signature is used to generate ECDSA signatures for messages.
package signature

import (
	"bytes"
	"crypto/ecdsa"
	"crypto/rand"
	"crypto/sha256"
	"crypto/sha512"
	"errors"
	"math/big"
)

var (
	// ErrInvalidSignature is returned when the signature does not match the the expected signature for the public key
	ErrInvalidSignature = errors.New("the signature is not valid for the message")
)

// CreateECSignature generates a cryptographically secure ECDSA signature for the
// given message.
//
// The message will first be hashed using using a SHA checksum. The specific
// checksum algorithm will be determined by the given key type.
func CreateECSignature(key *ecdsa.PrivateKey, msg []byte) ([]byte, error) {
	hash, err := hashMessage(key.Params().Name, msg)
	if err != nil {
		return nil, err
	}

	r, s, err := ecdsa.Sign(rand.Reader, key, hash)
	if err != nil {
		return nil, err
	}

	buffer := bytes.Buffer{}
	buffer.Write(r.Bytes())
	buffer.Write(s.Bytes())

	return buffer.Bytes(), nil
}

// VerifyECSignature verifies a a signature generated by an EC private key.
func VerifyECSignature(key *ecdsa.PublicKey, message, signature []byte) error {
	hash, err := hashMessage(key.Params().Name, message)
	if err != nil {
		return err
	}

	r := big.NewInt(0).SetBytes(signature[:len(signature)/2])
	s := big.NewInt(0).SetBytes(signature[len(signature)/2:])

	if ecdsa.Verify(key, hash, r, s) {
		return nil
	}

	return ErrInvalidSignature
}

func hashMessage(curveName string, message []byte) ([]byte, error) {
	switch curveName {
	case "P-256":
		hash := sha256.Sum256(message)
		return hash[:], nil
	case "P-521":
		hash := sha512.Sum512(message)
		return hash[:], nil
	default:
		return nil, errors.New("unsupported curve for hashing message")
	}
}

// CreateSignature will be removed in a future release
//
// Deprecated: Version 1.0.0, replaced by CreateECSignature
var CreateSignature = CreateECSignature

// VerifySignature will be removed in a future release
//
// Deprecated: Version 1.0.0, replaced by VerifyECSignature
var VerifySignature = VerifyECSignature
